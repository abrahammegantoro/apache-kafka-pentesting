package keamanan_informasi.kafka_security;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.time.Duration;
import java.util.Base64;
import java.util.Collections;
import java.util.Properties;

public class KafkaCryptoConsumer {

    private static final BigInteger N = new BigInteger("187");
    private static final BigInteger D = new BigInteger("267");

    public static void main(String[] args) throws NoSuchAlgorithmException {
        Security.addProvider(new BouncyCastleProvider());

        Properties props = new Properties();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put("group.id", "test-group");
        props.put("auto.offset.reset", "earliest");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,
                "org.apache.kafka.common.serialization.StringDeserializer");
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,
                "org.apache.kafka.common.serialization.StringDeserializer");

        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);
        String topic = "your-topic";

        try {
            consumer.subscribe(Collections.singletonList(topic));

            while (true) {
                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));
                for (ConsumerRecord<String, String> record : records) {
                    String receivedHash = record.key();
                    String encryptedValue = record.value();

                    String decryptedValue = decryptRSA(encryptedValue);
                    String calculatedHash = calculateSHA3("test");

                    if (calculatedHash.equals(receivedHash)) {
                        System.out.println("Encrypted Value: " + encryptedValue);
                        System.out.println("Message is authentic: " + decryptedValue);
                    } else {
                        System.out.println("Message is corrupted or tampered with.");
                    }
                }
            }
        } finally {
            consumer.close();
        }
    }

    private static String calculateSHA3(String data) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA3-256");
            byte[] hashBytes = digest.digest(data.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(hashBytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    private static String decryptRSA(String encryptedText) {
        String[] encryptedValues = encryptedText.split(" ");
        StringBuilder decryptedMessage = new StringBuilder();

        for (String value : encryptedValues) {
            BigInteger encryptedAscii = new BigInteger(value);
            BigInteger decryptedAscii = encryptedAscii.modPow(D, N);
            decryptedMessage.append((char) decryptedAscii.intValue());
        }

        return decryptedMessage.toString();
    }
}
