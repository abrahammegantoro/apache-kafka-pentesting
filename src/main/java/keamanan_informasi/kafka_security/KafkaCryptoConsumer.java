package keamanan_informasi.kafka_security;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.time.Duration;
import java.util.Base64;
import java.util.Collections;
import java.util.Properties;
import javax.crypto.Cipher;

public class KafkaCryptoConsumer {

    private static final String RSA_ALGORITHM = "RSA";
    private static final String PUBLIC_KEY_STRING = "MFswDQYJKoZIhvcNAQEBBQADSgAwRwJAVjJGxRRCeW+empDcnFvL34nRHusZSBd8lN78xywNZzVcbUnSVFWnGPBRmeyR/ISuQuNJh/ibS8bitfTrbMG10wIDAQAB";
    private static final String PRIVATE_KEY_STRING = "MIIBOAIBAAJAVjJGxRRCeW+empDcnFvL34nRHusZSBd8lN78xywNZzVcbUnSVFWnGPBRmeyR/ISuQuNJh/ibS8bitfTrbMG10wIDAQABAkAehh9ZmxsPNd/MjJATLs67kmpjsI17YhXUAkMxpP/6FBmk9L2LOdd7xaElkF0jMxaAtKtUA/sMyQhVxSnXzKMBAiEApP1kQlV0Dewh2/946IKxp8mP35vAhYUJ2xhaJTZW3XECIQCFvkbICCde3wF/zfhxDDiTtoh+Ni0nJvgZA2EQ5tY1gwIgUaCsAcWVbW3uMpHql95RVtn6PH8qeOShQ6yArPh9cYECIDifxdH8+cZF/pmAt/YM6YtIleNxxo40Boh4kMkaIolHAiAyFAtz1CLbZgoslfZZ7sXXQ7Sqf4wzcoTQjruexpXxYg==";

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        Properties props = new Properties();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put("group.id", "test-group");
        props.put("auto.offset.reset", "earliest");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");

        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);
        String topic = "your-topic";

        try {
            consumer.subscribe(Collections.singletonList(topic));

            while (true) {
                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));
                for (ConsumerRecord<String, String> record : records) {
                    String receivedHash = record.key();
                    String encryptedValue = record.value();

                    String decryptedValue = decryptRSA(encryptedValue);
                    String calculatedHash = generateSHA256Hash(decryptedValue);

                    if (calculatedHash.equals(receivedHash)) {
                        System.out.println("Message is authentic: " + decryptedValue);
                    } else {
                        System.out.println("Message is corrupted or tampered with.");
                    }
                }
            }
        } finally {
            consumer.close();
        }
    }

    private static String generateSHA256Hash(String data) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hashBytes = digest.digest(data.getBytes(StandardCharsets.UTF_8));
        return Base64.getEncoder().encodeToString(hashBytes);
    }

    private static String decryptRSA(String encryptedText) throws Exception {
        byte[] privateKeyBytes = Base64.getDecoder().decode(PRIVATE_KEY_STRING);
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);
        PrivateKey privateKey = keyFactory.generatePrivate(keySpec);

        Cipher cipher = Cipher.getInstance(RSA_ALGORITHM, "BC"); 
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));
        return new String(decryptedBytes, StandardCharsets.UTF_8);
    }

    private static PublicKey getPublicKeyFromString(String key) throws Exception {
        byte[] keyBytes = Base64.getDecoder().decode(key);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
        KeyFactory kf = KeyFactory.getInstance(RSA_ALGORITHM);
        return kf.generatePublic(spec);
    }
}
