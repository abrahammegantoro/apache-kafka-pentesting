package keamanan_informasi.kafka_security;

import org.apache.kafka.clients.producer.*;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Properties;

public class KafkaCryptoProducer {

    private static final BigInteger N = new BigInteger("187");
    private static final BigInteger E = new BigInteger("3");

    public static void main(String[] args) {
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringSerializer");
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringSerializer");

        Producer<String, String> producer = new KafkaProducer<>(props);
        String topic = "your-topic";

        try {
            String value = "test";
            String encryptedValue = encryptRSA(value);
            String key = calculateSHA3(value);

            producer.send(new ProducerRecord<>(topic, key, encryptedValue), new Callback() {
                public void onCompletion(RecordMetadata metadata, Exception exception) {
                    if (exception != null) {
                        exception.printStackTrace();
                    } else {
                        System.out.println("Encrypted Value: " + encryptedValue);
                        System.out.printf("Produced record to topic %s partition [%d] @ offset %d%n",
                                metadata.topic(), metadata.partition(), metadata.offset());
                    }
                }
            });
        } finally {
            producer.close();
        }
    }

    private static String calculateSHA3(String value) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA3-256");
            byte[] hash = digest.digest(value.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(hash);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    private static String encryptRSA(String data) {
        StringBuilder encryptedData = new StringBuilder();
        for (char ch : data.toCharArray()) {
            BigInteger ascii = BigInteger.valueOf((int) ch);
            BigInteger encryptedAscii = ascii.modPow(E, N);
            encryptedData.append(encryptedAscii.toString()).append(" ");
        }
        return encryptedData.toString().trim();
    }
}
